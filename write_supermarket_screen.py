lines = [
"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';",
"import {",
"  ActivityIndicator,",
"  Image,",
"  KeyboardAvoidingView,",
"  Platform,",
"  ScrollView,",
"  StyleSheet,",
"  Text,",
"  TextInput,",
"  TouchableOpacity,",
"  View,",
"} from 'react-native';",
"import { SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';",
"import Ionicons from 'react-native-vector-icons/Ionicons';",
"",
"import { useOrder } from '../context/OrderContext';",
"import { computeOrderTotals } from '../utils/orderTotals';",
"import { getStoreInventory } from '../services/supermarketInventory';",
"import { normalizeBrandKey, isSuperMarketBrand } from '../constants/brands';",
"import { fetchSuperMarketListings } from '../services/supermarketData';",
"",
"const DEFAULT_SUPERMARKET_BRAND = 'john';",
"const VAT_MULTIPLIER = 1.24;",
"const FALLBACK_CATEGORY = '\\u039b\\u03bf\\u03b9\\u03c0\\u03ad\\u03c2 \\u03ba\\u03b1\\u03c4\\u03b7\\u03b3\\u03bf\\u03c1\\u03af\\u03b5\\u03c2';",
"",
"const STRINGS = {",
"  title: '\\u0395\\u03c0\\u03b9\\u03bb\\u03bf\\u03b3\\u03ae \\u03c0\\u03c1\\u03bf\\u03ca\\u03cc\\u03bd\\u03c4\\u03c9\\u03bd SuperMarket',",
"  companiesAll: '\\u038c\\u03bb\\u03b5\\u03c2 \\u03bf\\u03b9 \\u03b5\\u03c4\\u03b1\\u03b9\\u03c1\\u03b5\\u03af\\u03b5\\u03c2',",
"  searchPlaceholder: '\\u0391\\u03bd\\u03b1\\u03b6\\u03ae\\u03c4\\u03b7\\u03c3\\u03b7 \\u03bc\\u03b5 \\u03ba\\u03c9\\u03b4\\u03b9\\u03ba\\u03cc, \\u03c0\\u03b5\\u03c1\\u03b9\\u03b3\\u03c1\\u03b1\\u03c6\\u03ae \\u03ae barcode\\u2026',",
"  noProducts: '\\u0394\\u03b5\\u03bd \\u03b2\\u03c1\\u03ad\\u03b8\\u03b7\\u03ba\\u03b1\\u03bd \\u03c0\\u03c1\\u03bf\\u03ca\\u03cc\\u03bd\\u03c4\\u03b1.',",
"  emptyHint: '\\u0394\\u03bf\\u03ba\\u03af\\u03bc\\u03b1\\u03c3\\u03b5 \\u03b1\\u03bd\\u03b1\\u03bd\\u03ad\\u03c9\\u03c3\\u03b7 \\u03b1\\u03c0\\u03cc \\u03c4\\u03b7\\u03bd \\u03bf\\u03b8\\u03cc\\u03bd\u03b7 \\u0394\\u03b5\\u03b4\\u03bf\\u03bc\\u03ad\\u03bd\\u03c9\\u03bd.',",
"  suggestedQty: '\\u03a0\\u03c1\\u03bf\\u03c4\\u03b5\\u03b9\\u03bd\\u03cc\\u03bc\\u03b5\\u03bd\\u03b7 \\u03c0\\u03bf\\u03c3\\u03cc\\u03c4\\u03b7\\u03c4\\u03b1',",
"  orderedQty: '\\u03a0\\u03b1\\u03c1\\u03b1\\u03b3\\u03b3\\u03b5\\u03bb\\u03b8\\u03b5\\u03af\\u03c3\\u03b1 \\u03c0\\u03bf\\u03c3\\u03cc\\u03c4\\u03b7\\u03c4\\u03b1',",
"  storeStock: '\\u0391\\u03c0\\u03cc\\u03b8\\u03b5\\u03bc\\u03b1 \\u03ba\\u03b1\\u03c4\\u03b1\\u03c3\\u03c4\\u03ae\\u03bc\\u03b1\\u03c4\\u03bf\\u03c2',",
"  inventoryStock: '\\u0391\\u03c0\\u03cc\\u03b8\\u03b5\\u03bc\\u03b1 \\u03b1\\u03c0\\u03bf\\u03b8\\u03ae\\u03ba\\u03b7\\u03c2',",
"  price: '\\u03a4\\u03b9\\u03bc\\u03ae',",
"  srp: '\\u039b\\u03b9\\u03b1\\u03bd\\u03b9\\u03ba\\u03ae',",
"  back: '\\u03a0\\u03af\\u03c3\\u03c9',",
"  applySuggested: '\\u0395\\u03c6\\u03b1\\u03c1\\u03bc\\u03bf\\u03b3\\u03ae \\u03c0\\u03c1\\u03bf\\u03c4\\u03b5\\u03b9\\u03bd\\u03cc\\u03bc\\u03b5\\u03bd\\u03c9\\u03bd \\u03c0\\u03bf\\u03c3\\u03bf\\u03c4\\u03ae\\u03c4\\u03c9\\u03bd',",
"  review: '\\u03a3\\u03cd\\u03bd\\u03bf\\u03c8\\u03b7 \\u03c0\\u03b1\\u03c1\\u03b1\\u03b3\\u03b3\\u03b5\\u03bb\\u03af\\u03b1\\u03c2',",
"  reviewDisabled: '\\u03a0\\u03c1\\u03cc\\u03c3\\u03b8\\u03b5\\u03c3\\u03b5 \\u03c0\\u03c1\\u03bf\\u03ca\\u03cc\\u03bd\\u03c4\\u03b1 \u03b3\\u03b9\\u03b1 \u03bd\\u03b1 \u03c3\\u03c5\\u03bd\\u03b5\\u03c7\\u03af\\u03c3\\u03b5\\u03b9\\u03c2',",
"  summary: (items, quantity, total) => `${items} \u03c0\u03c1\u03bf\u03ca\u03cc\u03bd\u03c4\u03b1 · ${quantity} \u03c4\u03b5\u03bc · ${total}`,",
"  groupCollapse: '\\u03a3\\u03cd\\u03bc\\u03c0\\u03c4\\u03c5\\u03be\\u03b7',",
"  groupExpand: '\\u0391\\u03bd\\u03ac\\u03c0\\u03c4\\u03c5\\u03be\\u03b7',",
"};
lines.extend([
"",
"const normalizeText = (value) => (value ? String(value).trim().toLowerCase() : '');",
"",
"const parseNumber = (value) => {",
"  if (value === null || value === undefined) return null;",
"  if (typeof value === 'number') {",
"    return Number.isFinite(value) ? value : null;",
"  }",
"  const sanitized = String(value)",
"    .replace(/\\s+/g, '')",
"    .replace(/,/g, '.')",
"    .replace(/[^0-9.-]/g, '');",
"  if (!sanitized) return null;",
"  const parsed = Number(sanitized);",
"  return Number.isFinite(parsed) ? parsed : null;",
"};",
"",
"const formatCurrency = (value) => {",
"  const amount = Number(value || 0);",
"  return `€${amount.toFixed(2)}`;",
"};",
"",
"const translateCategoryCode = (value) => {",
"  const text = normalizeText(value);",
"  if (!text) return '';",
"  if (text.includes('grand')) return 'A';",
"  if (text.includes('express')) return 'C';",
"",
"  switch (text.replace(/\\s+/g, '')) {",
"    case 'α':",
"    case 'a':",
"      return 'A';",
"    case 'β':",
"    case 'b':",
"      return 'B';",
"    case 'γ':",
"    case 'g':",
"    case 'c':",
"      return 'C';",
"    case 'δ':",
"    case 'd':",
"      return 'D';",
"    default:",
"      return text.toUpperCase();",
"  }",
"};",
"",
"const deriveStoreCategories = (store) => {",
"  const derived = new Set();",
"  const candidates = [store?.storeCategory, store?.storeCategoryCode, store?.hasToys, store?.category];",
"",
"  candidates.forEach((candidate) => {",
"    const normalized = normalizeText(candidate);",
"    if (!normalized) return;",
"    normalized",
"      .split(/[\\/,'\\u0387]+/)",
"      .map((part) => translateCategoryCode(part))",
"      .filter(Boolean)",
"      .forEach((code) => derived.add(code));",
"  });",
"",
"  if (!derived.size) {",
"    derived.add('A');",
"    derived.add('B');",
"    derived.add('C');",
"  }",
"",
"  return Array.from(derived);",
"};",
"",
"const collectListingCategories = (listing) => {",
"  const categories = new Set();",
"  if (Array.isArray(listing?.activeCategories)) {",
"    listing.activeCategories.forEach((cat) => {",
"      const normalized = translateCategoryCode(cat);",
"      if (normalized) categories.add(normalized);",
"    });",
"  }",
"  if (listing?.isAActive) categories.add('A');",
"  if (listing?.isBActive) categories.add('B');",
"  if (listing?.isCActive) categories.add('C');",
"  if (listing?.category) {",
"    const normalized = translateCategoryCode(listing.category);",
"    if (normalized) categories.add(normalized);",
"  }",
"  return Array.from(categories);",
"};",
"",
"const buildOrderLine = (product, quantity, brand) => {",
"  const qty = Number(quantity || 0);",
"  if (!Number.isFinite(qty) || qty <= 0) {",
"    return null;",
"  }",
"",
"  return {",
"    id: `supermarket_${product.code}`,",
"    productCode: product.code,",
"    code: product.code,",
"    description: product.description,",
"    quantity: qty,",
"    packaging: product.packaging,",
"    wholesalePrice: product.priceNumber ?? 0,",
"    srp: product.srpNumber ?? null,",
"    barcode: product.barcode || null,",
"    isNew: product.isNew || false,",
"    suggestedQty: product.suggestedQtyNumber ?? null,",
"    currentStock: product.currentStock ?? null,",
"    storeStock: product.storeStock ?? null,",
"    listingId: product.listingId,",
"    brand,",
"    orderType: 'supermarket',",
"    photoUrl: product.photoUrl || null,",
"  };",
"};",
"",
"const fingerprintListings = (list = []) =>",
"  list",
"    .map((entry = {}) => {",
"      const code = entry?.productCode || entry?.code || '';",
"      const updated = entry?.updatedAt || entry?.lastModified || '';",
"      return `${code}#${updated}`;",
"    })",
"    .join('|');",
"])
